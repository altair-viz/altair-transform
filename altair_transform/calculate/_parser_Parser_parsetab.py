
# _parser_Parser_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULOleftEXPrightUMINUSUPLUSLOGICAL_NOTBITWISE_NOTBINARY BITWISE_NOT COLON COMMA DIVIDE EXP FLOAT HEX LBRACE LBRACKET LOGICAL_NOT LPAREN MINUS MODULO NAME OCTAL PERIOD PLUS RBRACE RBRACKET RPAREN STRING TIMESstatement : expression\n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression TIMES expression\n                   | expression DIVIDE expression\n                   | expression EXP expression\n                   | expression MODULO expression\n        \n        expression : MINUS expression %prec UMINUS\n                   | PLUS expression %prec UPLUS\n                   | BITWISE_NOT expression\n                   | LOGICAL_NOT expression\n        expression : term\n        term : atom\n             | attraccess\n             | functioncall\n             | indexing\n        \n        number : HEX\n               | OCTAL\n               | BINARY\n               | FLOAT\n        \n        atom : number\n             | STRING\n             | global\n             | list\n             | object\n             | group\n        global : NAME\n        list : LBRACKET RBRACKET\n             | LBRACKET arglist RBRACKET\n        \n        object : LBRACE RBRACE\n               | LBRACE objectarglist RBRACE\n        \n        objectarglist : objectarglist COMMA objectarg\n                      | objectarg\n        \n        objectarg : objectkey COLON expression\n                  | NAME\n        \n        objectkey : NAME\n                  | STRING\n                  | number\n        group : LPAREN expression RPARENattraccess : atom PERIOD NAMEindexing : atom LBRACKET expression RBRACKET\n        functioncall : atom LPAREN RPAREN\n                     | atom LPAREN arglist RPAREN\n        \n        arglist : arglist COMMA expression\n                | expression\n        '
    
_lr_action_items = {'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,37,38,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,],[4,27,4,4,4,4,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,4,4,-17,-18,-19,-20,4,4,4,4,4,4,-9,-8,-10,-11,4,4,27,-28,27,-30,-2,-3,-4,-5,-6,-7,-40,-42,27,-39,-29,4,-31,4,-43,-41,27,27,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,37,38,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,],[3,26,3,3,3,3,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,3,3,-17,-18,-19,-20,3,3,3,3,3,3,-9,-8,-10,-11,3,3,26,-28,26,-30,-2,-3,-4,-5,-6,-7,-40,-42,26,-39,-29,3,-31,3,-43,-41,26,26,]),'BITWISE_NOT':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LOGICAL_NOT':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'STRING':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[13,13,13,13,13,13,13,48,13,13,13,13,13,13,13,13,13,48,13,]),'HEX':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'OCTAL':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'BINARY':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FLOAT':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NAME':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,36,37,38,62,64,65,],[18,18,18,18,18,18,18,47,18,18,18,18,18,18,56,18,18,18,47,18,]),'LBRACKET':([0,3,4,5,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,37,38,40,43,60,61,62,63,65,],[20,20,20,20,20,38,-21,-22,-23,-24,-25,-26,-27,20,20,-17,-18,-19,-20,20,20,20,20,20,20,20,20,-28,-30,-39,-29,20,-31,20,]),'LBRACE':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'LPAREN':([0,3,4,5,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,37,38,40,43,60,61,62,63,65,],[19,19,19,19,19,37,-21,-22,-23,-24,-25,-26,-27,19,19,-17,-18,-19,-20,19,19,19,19,19,19,19,19,-28,-30,-39,-29,19,-31,19,]),'$end':([1,2,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,40,43,50,51,52,53,54,55,56,57,60,61,63,66,67,],[0,-1,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,-28,-30,-2,-3,-4,-5,-6,-7,-40,-42,-39,-29,-31,-43,-41,]),'TIMES':([2,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,63,66,67,68,70,],[28,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,28,-28,28,-30,28,28,-4,-5,-6,-7,-40,-42,28,-39,-29,-31,-43,-41,28,28,]),'DIVIDE':([2,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,63,66,67,68,70,],[29,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,29,-28,29,-30,29,29,-4,-5,-6,-7,-40,-42,29,-39,-29,-31,-43,-41,29,29,]),'EXP':([2,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,63,66,67,68,70,],[30,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,30,-28,30,-30,30,30,30,30,-6,30,-40,-42,30,-39,-29,-31,-43,-41,30,30,]),'MODULO':([2,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,39,40,42,43,50,51,52,53,54,55,56,57,59,60,61,63,66,67,68,70,],[31,-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,31,-28,31,-30,31,31,-4,-5,-6,-7,-40,-42,31,-39,-29,-31,-43,-41,31,31,]),'RPAREN':([7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,37,39,40,42,43,50,51,52,53,54,55,56,57,58,60,61,63,66,67,68,],[-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,57,60,-28,-45,-30,-2,-3,-4,-5,-6,-7,-40,-42,66,-39,-29,-31,-43,-41,-44,]),'RBRACKET':([7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,32,33,34,35,40,41,42,43,50,51,52,53,54,55,56,57,59,60,61,63,66,67,68,],[-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,40,-17,-18,-19,-20,-9,-8,-10,-11,-28,61,-45,-30,-2,-3,-4,-5,-6,-7,-40,-42,67,-39,-29,-31,-43,-41,-44,]),'COMMA':([7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,32,33,34,35,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,60,61,63,66,67,68,69,70,],[-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-9,-8,-10,-11,-28,62,-45,-30,64,-33,-35,-2,-3,-4,-5,-6,-7,-40,-42,62,-39,-29,-31,-43,-41,-44,-32,-34,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,32,33,34,35,40,43,44,45,47,50,51,52,53,54,55,56,57,60,61,63,66,67,69,70,],[-12,-13,-14,-15,-16,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,43,-9,-8,-10,-11,-28,-30,63,-33,-35,-2,-3,-4,-5,-6,-7,-40,-42,-39,-29,-31,-43,-41,-32,-34,]),'PERIOD':([8,12,13,14,15,16,17,18,21,22,23,24,40,43,60,61,63,],[36,-21,-22,-23,-24,-25,-26,-27,-17,-18,-19,-20,-28,-30,-39,-29,-31,]),'COLON':([21,22,23,24,46,47,48,49,],[-17,-18,-19,-20,65,-36,-37,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[2,32,33,34,35,39,42,50,51,52,53,54,55,42,59,68,70,]),'term':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'atom':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'attraccess':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'functioncall':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'indexing':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'number':([0,3,4,5,6,19,20,25,26,27,28,29,30,31,37,38,62,64,65,],[12,12,12,12,12,12,12,49,12,12,12,12,12,12,12,12,12,49,12,]),'global':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'list':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'object':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'group':([0,3,4,5,6,19,20,26,27,28,29,30,31,37,38,62,65,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'arglist':([20,37,],[41,58,]),'objectarglist':([25,],[44,]),'objectarg':([25,64,],[45,69,]),'objectkey':([25,64,],[46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','_parser.py',187),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','_parser.py',192),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','_parser.py',193),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','_parser.py',194),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','_parser.py',195),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','_parser.py',196),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','_parser.py',197),
  ('expression -> MINUS expression','expression',2,'p_expression_unaryop','_parser.py',204),
  ('expression -> PLUS expression','expression',2,'p_expression_unaryop','_parser.py',205),
  ('expression -> BITWISE_NOT expression','expression',2,'p_expression_unaryop','_parser.py',206),
  ('expression -> LOGICAL_NOT expression','expression',2,'p_expression_unaryop','_parser.py',207),
  ('expression -> term','expression',1,'p_expression_term','_parser.py',213),
  ('term -> atom','term',1,'p_term','_parser.py',218),
  ('term -> attraccess','term',1,'p_term','_parser.py',219),
  ('term -> functioncall','term',1,'p_term','_parser.py',220),
  ('term -> indexing','term',1,'p_term','_parser.py',221),
  ('number -> HEX','number',1,'p_number','_parser.py',227),
  ('number -> OCTAL','number',1,'p_number','_parser.py',228),
  ('number -> BINARY','number',1,'p_number','_parser.py',229),
  ('number -> FLOAT','number',1,'p_number','_parser.py',230),
  ('atom -> number','atom',1,'p_atom','_parser.py',236),
  ('atom -> STRING','atom',1,'p_atom','_parser.py',237),
  ('atom -> global','atom',1,'p_atom','_parser.py',238),
  ('atom -> list','atom',1,'p_atom','_parser.py',239),
  ('atom -> object','atom',1,'p_atom','_parser.py',240),
  ('atom -> group','atom',1,'p_atom','_parser.py',241),
  ('global -> NAME','global',1,'p_global','_parser.py',246),
  ('list -> LBRACKET RBRACKET','list',2,'p_list','_parser.py',251),
  ('list -> LBRACKET arglist RBRACKET','list',3,'p_list','_parser.py',252),
  ('object -> LBRACE RBRACE','object',2,'p_object','_parser.py',263),
  ('object -> LBRACE objectarglist RBRACE','object',3,'p_object','_parser.py',264),
  ('objectarglist -> objectarglist COMMA objectarg','objectarglist',3,'p_objectarglist','_parser.py',273),
  ('objectarglist -> objectarg','objectarglist',1,'p_objectarglist','_parser.py',274),
  ('objectarg -> objectkey COLON expression','objectarg',3,'p_objectarg','_parser.py',283),
  ('objectarg -> NAME','objectarg',1,'p_objectarg','_parser.py',284),
  ('objectkey -> NAME','objectkey',1,'p_objectkey','_parser.py',293),
  ('objectkey -> STRING','objectkey',1,'p_objectkey','_parser.py',294),
  ('objectkey -> number','objectkey',1,'p_objectkey','_parser.py',295),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','_parser.py',300),
  ('attraccess -> atom PERIOD NAME','attraccess',3,'p_attraccess','_parser.py',304),
  ('indexing -> atom LBRACKET expression RBRACKET','indexing',4,'p_indexing','_parser.py',308),
  ('functioncall -> atom LPAREN RPAREN','functioncall',3,'p_functioncall','_parser.py',318),
  ('functioncall -> atom LPAREN arglist RPAREN','functioncall',4,'p_functioncall','_parser.py',319),
  ('arglist -> arglist COMMA expression','arglist',3,'p_arglist','_parser.py',330),
  ('arglist -> expression','arglist',1,'p_arglist','_parser.py',331),
]
